// Generated by CoffeeScript 1.6.1
(function() {
  var get_best_sentence, get_likeness, get_paragraphs, get_sentence_ranks, get_sentences, get_summary, get_words, intersect_safe, natural, tokenizer;

  natural = require('natural');

  tokenizer = new natural.WordTokenizer();

  intersect_safe = function(a, b) {
    var ai, bi, result;
    ai = 0;
    bi = 0;
    result = new Array();
    while (ai < a.length && bi < b.length) {
      if (a[ai] < b[bi]) {
        ai++;
      } else if (a[ai] > b[bi]) {
        bi++;
      } else {
        result.push(a[ai]);
        ai++;
        bi++;
      }
    }
    return result;
  };

  get_words = function(text, unique) {
    var k, uniques, v, word, words, _i, _len;
    if (unique == null) {
      unique = true;
    }
    words = tokenizer.tokenize(text);
    if (unique) {
      uniques = {};
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        word = words[_i];
        uniques[word] = word;
      }
      return (function() {
        var _results;
        _results = [];
        for (k in uniques) {
          v = uniques[k];
          _results.push(k);
        }
        return _results;
      })();
    } else {
      return words;
    }
  };

  get_sentences = function(text) {
    var s, _i, _len, _ref, _results;
    _ref = text.split(/(\.)['”" \)\n]/g);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _results.push(s.trim());
    }
    return _results;
  };

  get_paragraphs = function(text) {
    return text.split(/[\r\n]{2}/g);
  };

  get_likeness = function(s1, s2) {
    var intersection, w1, w2;
    if (!(s1 && s2)) {
      return 0;
    }
    w1 = get_words(s1);
    w2 = get_words(s2);
    if (w1.length + w2.length === 0) {
      return 0;
    } else {
      intersection = intersect_safe(w1, w2);
      return intersection.length / ((w1.length + w2.length) / 2);
    }
  };

  get_sentence_ranks = function(paragraph) {
    var i, j, matrix, score, sentences, sentences_dict, x, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
    sentences = get_sentences(paragraph);
    matrix = (function() {
      var _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = sentences.length; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = sentences.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(0);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (i = _i = 0, _ref = sentences.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      for (j = _j = 0, _ref1 = sentences.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        if (i === j) {
          matrix[i][j] = 0;
        } else {
          matrix[i][j] = get_likeness(sentences[i], sentences[j]);
        }
      }
    }
    sentences_dict = {};
    for (i = _k = 0, _ref2 = sentences.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
      score = 0;
      for (j = _l = 0, _ref3 = sentences.length; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
        score += matrix[i][j];
      }
      sentences_dict[sentences[i]] = score;
    }
    return sentences_dict;
  };

  get_best_sentence = function(sentences_dict) {
    var best_sentence, k, max_value, v;
    best_sentence = '';
    max_value = -1;
    for (k in sentences_dict) {
      v = sentences_dict[k];
      if (v > max_value) {
        max_value = v;
        best_sentence = k;
      }
    }
    return best_sentence;
  };

  get_summary = function(content) {
    var best_sentence, paragraph, paragraphs, ranks, summary, x, _i, _len;
    summary = [];
    paragraphs = get_paragraphs(content);
    for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
      paragraph = paragraphs[_i];
      ranks = get_sentence_ranks(paragraph);
      best_sentence = get_best_sentence(ranks);
      summary.push(best_sentence);
    }
    return (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = summary.length; _j < _len1; _j++) {
        x = summary[_j];
        if (x) {
          _results.push(x);
        }
      }
      return _results;
    })();
  };

  module.exports = get_summary;

}).call(this);
